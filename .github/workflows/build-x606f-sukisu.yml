name: Build X606F Kernel with SukiSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev make automake \
            autogen autoconf pkg-config git wget tar xz-utils gcc g++ \
            build-essential ccache curl python3 python3-pip unzip \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "‚úÖ Build environment ready"

      - name: Check and Extract Kernel Source
        run: |
          if [ ! -f kernel.tgz ]; then
            echo "‚ùå ERROR: kernel.tgz not found in repository root"
            echo "Please upload kernel.tgz to this repo root or use a release URL."
            exit 1
          fi
          mkdir kernel
          tar --warning=no-unknown-keyword -xf kernel.tgz -C kernel
          echo "‚úÖ Extracted kernel.tgz to kernel/"
          echo "üìÇ Top-level structure after extraction:"
          ls -la kernel

      - name: Detect Kernel Directory (KDIR)
        id: detect-kdir
        run: |
          echo "üîç Searching for arch/arm64/configs ..."
          KDIR=$(find kernel -type d -path "*/arch/arm64/configs" | head -n 1 | sed 's|/arch/arm64/configs||')
          if [ -z "$KDIR" ]; then
            echo "‚ùå ERROR: arch/arm64/configs not found in extracted files"
            echo "Directory tree for debug:"
            find kernel -maxdepth 3 -type d | sed 's/^/  /'
            exit 1
          fi
          echo "‚úÖ Found KDIR: $KDIR"
          echo "KDIR=$KDIR" >> $GITHUB_ENV

      - name: Detect defconfig
        id: detect-defconfig
        run: |
          DEFCONFIG=$(find $KDIR/arch/arm64/configs -type f -name "*_defconfig" | head -n 1 | xargs basename)
          if [ -z "$DEFCONFIG" ]; then
            echo "‚ùå ERROR: No *_defconfig found in $KDIR/arch/arm64/configs"
            echo "Available files:"
            ls -la $KDIR/arch/arm64/configs || true
            exit 1
          fi
          echo "‚úÖ Using defconfig: $DEFCONFIG"
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
          cd "$KDIR"
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          echo "üî® Running make $DEFCONFIG"
          make "$DEFCONFIG"

          echo "üì¶ Fixing potential modules.builtin issues"
          find drivers -name "modules.builtin" -exec rm {} \; || true
          find drivers -type d -exec touch {}/modules.builtin \; || true

          echo "üî® Starting build with $(nproc) threads"
          if ! make -j$(nproc); then
            echo "‚ö†Ô∏è Parallel build failed, retrying in single-thread mode"
            make
          fi

      - name: Package Kernel Image
        run: |
          cd "$KDIR"
          OUTPUT_DIR="$GITHUB_WORKSPACE/output"
          mkdir -p "$OUTPUT_DIR"
          if [ -f arch/arm64/boot/Image.gz-dtb ]; then
            cp arch/arm64/boot/Image.gz-dtb "$OUTPUT_DIR/"
          elif [ -f arch/arm64/boot/Image ]; then
            cp arch/arm64/boot/Image "$OUTPUT_DIR/"
          else
            echo "‚ùå ERROR: Kernel Image not found"
            exit 1
          fi
          echo "‚úÖ Kernel image copied to $OUTPUT_DIR"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: x606f-kernel
          path: output/*
