name: Build ARM64 Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev crossbuild-essential-arm64

      - name: Download Kernel Source
        run: |
          if [ ! -f kernel.tgz ]; then
            echo "❌ ERROR: kernel.tgz not found in repository root"
            exit 1
          fi
          mkdir kernel
          tar -xzf kernel.tgz -C kernel
          echo "✅ Extracted kernel.tgz"
          
          echo "📂 Directory after extraction:"
          find kernel -maxdepth 4 -type d

      - name: Normalize Kernel Directory
        run: |
          # 如果 kernel 下只有一个子目录，则提升一层
          SUBDIR=$(find kernel -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ "$SUBDIR" -eq 1 ]; then
            SUBDIR_NAME=$(find kernel -mindepth 1 -maxdepth 1 -type d)
            echo "🔍 Detected single subdir: $SUBDIR_NAME"
            mv "$SUBDIR_NAME"/* kernel/
          fi
          
          echo "📂 Directory after normalize:"
          find kernel -maxdepth 4 -type d

      - name: Detect Kernel Top Directory
        id: detect
        run: |
          KDIR=$(find kernel -type d -path "*/arch/arm64/configs" | head -n 1 | sed 's|/arch/arm64/configs||')
          if [ -z "$KDIR" ]; then
            echo "❌ ERROR: arch/arm64/configs not found in extracted files"
            echo "📂 Current structure:"
            find kernel -maxdepth 5 -type d
            exit 1
          fi
          echo "✅ Detected kernel dir: $KDIR"
          echo "KDIR=$KDIR" >> $GITHUB_ENV

      - name: Select defconfig
        run: |
          DEFCONFIG=$(ls $KDIR/arch/arm64/configs | grep defconfig | head -n 1)
          if [ -z "$DEFCONFIG" ]; then
            echo "❌ ERROR: No defconfig found in $KDIR/arch/arm64/configs"
            exit 1
          fi
          echo "✅ Using defconfig: $DEFCONFIG"
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
          cd $KDIR
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          
          echo "🔨 make $DEFCONFIG"
          make $DEFCONFIG
          
          echo "🔨 make -j$(nproc)"
          make -j$(nproc)

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-output
          path: |
            ${{ env.KDIR }}/arch/arm64/boot/Image*
            ${{ env.KDIR }}/arch/arm64/boot/dts/**/*.dtb
