name: Build ARM64 Kernel (Smart Detect)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc bison flex \
            libssl-dev make gcc-aarch64-linux-gnu

      - name: Extract kernel source
        run: |
          if [ -f kernel.tgz ]; then
            echo "✅ Found kernel.tgz, extracting..."
            mkdir kernel
            tar -xf kernel.tgz -C kernel
          elif [ -d kernel-4.9 ]; then
            echo "✅ Found kernel-4.9 directory"
            cp -r kernel-4.9 kernel
          else
            echo "⚠️ Using repository root as kernel source"
            cp -r . kernel
          fi

      - name: Detect kernel top directory
        id: detectdir
        run: |
          KDIR=$(find kernel -type d -name "arch" -path "*/arch/arm64/configs" | head -n 1 | sed 's|/arch/arm64/configs||')
          if [ -z "$KDIR" ]; then
            echo "❌ ERROR: arch/arm64/configs not found in extracted files"
            exit 1
          fi
          echo "✅ Kernel top dir: $KDIR"
          echo "TOPDIR=$KDIR" >> $GITHUB_ENV

      - name: Detect defconfig
        id: detect
        run: |
          DEFCONFIG=$(find $TOPDIR/arch/arm64/configs -maxdepth 1 -name "*_defconfig" | head -n 1 | xargs basename)
          if [ -z "$DEFCONFIG" ]; then
            echo "⚠️ No *_defconfig found, defaulting to defconfig"
            DEFCONFIG="defconfig"
          fi
          echo "✅ Using defconfig: $DEFCONFIG"
          echo "defconfig=$DEFCONFIG" >> $GITHUB_OUTPUT

      - name: Build kernel
        run: |
          cd $TOPDIR
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          echo "🏗️ Running make ${{ steps.detect.outputs.defconfig }}"
          make ${{ steps.detect.outputs.defconfig }}
          echo "🏗️ Building kernel image"
          make -j$(nproc)

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: |
            ${{ env.TOPDIR }}/arch/arm64/boot/Image*
