name: Build X606F Kernel (Auto Detect + Google Drive Support)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex \
            libssl-dev libncurses5-dev tar unzip wget curl python3-pip
          pip install gdown

      - name: Prepare kernel source
        run: |
          if [ -f kernel.tgz ]; then
            echo "✅ Found local kernel.tgz, extracting..."
            mkdir kernel
            tar -xzf kernel.tgz -C kernel
          else
            echo "⚠ No local kernel.tgz found. Attempting download from Google Drive..."
            gdown "https://drive.google.com/uc?id=105hhNx0kRQwg_PB9J64mxy2_c0gINnB_"
            mkdir kernel
            tar -xzf kernel.tgz -C kernel || { echo "❌ Failed to extract kernel.tgz"; exit 1; }
          fi
          echo "📂 Extracted directory structure:"
          find kernel -maxdepth 4 -type d | sed 's/^/  /'

      - name: Normalize structure if nested
        run: |
          SUBDIRS=$(find kernel -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ "$SUBDIRS" -eq 1 ]; then
            INNER=$(find kernel -mindepth 1 -maxdepth 1 -type d)
            echo "  ⬆ Single subdir detected: $INNER — flattening"
            mv "$INNER"/* kernel/
          fi
          echo "📂 Post-normalization structure:"
          find kernel -maxdepth 4 -type d | sed 's/^/  /'

      - name: Detect kernel top directory (KDIR)
        id: detect_kdir
        run: |
          KDIR=$(find kernel -type d -path "*/arch/arm64/configs" | head -n 1 | sed 's|/arch/arm64/configs||')
          if [ -z "$KDIR" ]; then
            echo "❌ ERROR: Cannot find arch/arm64/configs in extracted structure"
            exit 1
          fi
          echo "✅ Kernel source detected at: $KDIR"
          echo "KDIR=$KDIR" >> $GITHUB_ENV

      - name: Select defconfig
        id: detect_def
        run: |
          CONFIG_FILE=$(find "$KDIR/arch/arm64/configs" -maxdepth 1 -type f -name "*defconfig" | head -n 1)
          if [ -z "$CONFIG_FILE" ]; then
            echo "❌ ERROR: No defconfig found in $KDIR/arch/arm64/configs"
            exit 1
          fi
          CONFIG=$(basename "$CONFIG_FILE")
          echo "✅ Using defconfig: $CONFIG"
          echo "DEFCONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Build kernel
        run: |
          cd "$KDIR"
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          echo "🔨 Build started with: make $DEFCONFIG"
          make "$DEFCONFIG"
          echo "🔨 Parallel build"
          make -j$(nproc)

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: |
            ${{ env.KDIR }}/arch/arm64/boot/Image*
            ${{ env.KDIR }}/arch/arm64/boot/Image.gz*
